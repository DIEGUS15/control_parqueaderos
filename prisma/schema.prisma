generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullname  String
  email     String   @unique
  password  String
  role      Role     @default(SOCIO)
  activo    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación: Un usuario SOCIO puede tener múltiples parqueaderos
  parqueaderos Parqueadero[]

  @@map("users")
}

model Parqueadero {
  id          Int      @id @default(autoincrement())
  nombre      String
  direccion   String
  capacidad   Int
  costoPorHora Decimal @db.Decimal(10, 2)
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  socioId     Int
  socio       User     @relation(fields: [socioId], references: [id], onDelete: Restrict)
  
  registroVehiculos RegistroVehiculo[]
  historialVehiculos HistorialVehiculo[]

  @@map("parqueaderos")
}

model RegistroVehiculo {
  id          Int      @id @default(autoincrement())
  placa       String   
  parqueaderoId Int
  fechaIngreso DateTime @default(now())
  fechaSalida DateTime?
  activo      Boolean  @default(true) // true = dentro, false = salió
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parqueadero Parqueadero @relation(fields: [parqueaderoId], references: [id], onDelete: Restrict)

  @@map("registro_vehiculos")
}

// Nueva tabla para el historial
model HistorialVehiculo {
  id          Int      @id @default(autoincrement())
  placa       String   
  parqueaderoId Int
  fechaIngreso DateTime
  fechaSalida DateTime
  createdAt   DateTime @default(now())

  parqueadero Parqueadero @relation(fields: [parqueaderoId], references: [id], onDelete: Restrict)

  @@map("historial_vehiculos")
}

enum Role {
  ADMIN
  SOCIO
}